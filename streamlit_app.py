import streamlit as st
import pandas as pd
import numpy as np
import xml.etree.ElementTree as ET
from bs4 import BeautifulSoup
import pdfplumber
from io import BytesIO
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Å–º–µ—Ç", layout="wide")
st.title("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–º–µ—Ç—ã –∏ –í–û–†")

# === –§—É–Ω–∫—Ü–∏—è: –ø–∞—Ä—Å–∏–Ω–≥ PDF ===
def parse_pdf(uploaded_file):
    tables = []
    try:
        with pdfplumber.open(uploaded_file) as pdf:
            for page in pdf.pages:
                table = page.extract_table()
                if table:
                    df_page = pd.DataFrame(table[1:], columns=table[0])
                    tables.append(df_page)
        return pd.concat(tables, ignore_index=True) if tables else None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF: {e}")
        return None

# === –§—É–Ω–∫—Ü–∏—è: –ø–∞—Ä—Å–∏–Ω–≥ XML ===
def parse_xml(uploaded_file):
    try:
        tree = ET.parse(uploaded_file)
        root = tree.getroot()
        data = []

        for work in root.findall(".//Work") + root.findall(".//Row") + root.findall(".//–†–∞–±–æ—Ç–∞"):
            kod = work.find("Code") or work.find("Number") or work.find("–ö–æ–¥") or work.find("–®–∏—Ñ—Ä")
            name = work.find("Name") or work.find("Description") or work.find("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
            volume = work.find("Volume") or work.find("Amount") or work.find("–û–±—ä–µ–º") or work.find("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

            data.append({
                "–®–∏—Ñ—Ä": kod.text.strip() if kod is not None else "",
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name.text.strip() if name is not None else "",
                "–û–±—ä—ë–º": float(re.sub(r"[^\d.]", "", volume.text.replace(",", "."))) 
                         if volume is not None and volume.text and re.search(r"\d", volume.text) else np.nan
            })
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ XML: {e}")
        return None

# === –§—É–Ω–∫—Ü–∏—è: –ø–∞—Ä—Å–∏–Ω–≥ HTML ===
def parse_html(uploaded_file):
    try:
        content = uploaded_file.read().decode("utf-8", errors="ignore")
        dfs = pd.read_html(content, encoding="utf-8")
        return dfs[0] if len(dfs) > 0 else None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ HTML: {e}")
        return None

# === –§—É–Ω–∫—Ü–∏—è: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ ===
def load_file(uploaded_file):
    if uploaded_file.name.endswith(".xlsx"):
        return pd.read_excel(uploaded_file)
    elif uploaded_file.name.endswith(".pdf"):
        return parse_pdf(uploaded_file)
    elif uploaded_file.name.endswith(".xml"):
        uploaded_file.seek(0)
        return parse_xml(uploaded_file)
    elif uploaded_file.name.endswith((".html", ".htm")):
        uploaded_file.seek(0)
        return parse_html(uploaded_file)
    else:
        st.error("–§–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        return None

# === –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ ===
def auto_detect_columns(df):
    columns_lower = [str(col).strip().lower() for col in df.columns]
    mapping = {}

    # –ü–æ–∏—Å–∫ —à–∏—Ñ—Ä–∞
    for i, col in enumerate(columns_lower):
        if any(k in col for k in ["—à–∏—Ñ—Ä", "–∫–æ–¥", "—Ä–∞—Å—Ü–µ–Ω–∫–∞", "number", "code", "id", "–Ω–æ–º–µ—Ä"]):
            mapping["key"] = df.columns[i]
            break

    # –ü–æ–∏—Å–∫ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    for i, col in enumerate(columns_lower):
        if any(k in col for k in ["–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "—Ä–∞–±–æ—Ç–∞", "–æ–ø–∏—Å–∞–Ω–∏–µ", "name", "description", "–Ω–∞–∏–º"]):
            mapping["name"] = df.columns[i]
            break

    # –ü–æ–∏—Å–∫ –æ–±—ä—ë–º–∞
    for i, col in enumerate(columns_lower):
        if any(k in col for k in ["–æ–±—ä—ë–º", "–æ–±—ä–µ–º", "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–∫–æ–ª-–≤–æ", "qty", "amount", "volume"]):
            mapping["volume"] = df.columns[i]
            break

    return mapping

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ===
st.header("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã")

col1, col2 = st.columns(2)
with col1:
    file_smeta = st.file_uploader("–°–º–µ—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç", type=["xlsx", "pdf", "xml", "html", "htm"], key="smeta")
with col2:
    file_vor = st.file_uploader("–í–û–† (–æ–±—ä—ë–º—ã —Ä–∞–±–æ—Ç)", type=["xlsx", "pdf", "xml", "html", "htm"], key="vor")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
match_by = st.radio("–°–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ:", ["–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç"])
threshold = st.slider("–ü–æ—Ä–æ–≥ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—ä—ë–º–æ–≤ (%)", 0, 100, 5)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ ===
if file_smeta and file_vor:
    with st.spinner("–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..."):
        df_smeta = load_file(file_smeta)
        df_vor = load_file(file_vor)

    if df_smeta is None or df_vor is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–¥–∏–Ω –∏–∑ —Ñ–∞–π–ª–æ–≤")
    else:
        st.success("–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        detected_smeta = auto_detect_columns(df_smeta)
        detected_vor = auto_detect_columns(df_vor)

        st.header("3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("–°–º–µ—Ç–∞")
            options_smeta = list(df_smeta.columns)
            key_smeta = st.selectbox(
                "–°—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è",
                options_smeta,
                index=options_smeta.index(detected_smeta.get("key" if match_by == "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏" else "name")) 
                if (match_by == "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏" and "key" in detected_smeta) or 
                   (match_by != "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏" and "name" in detected_smeta) 
                else 0
            )
            vol_smeta = st.selectbox(
                "–°—Ç–æ–ª–±–µ—Ü —Å –æ–±—ä—ë–º–æ–º",
                options_smeta,
                index=options_smeta.index(detected_smeta["volume"]) 
                if "volume" in detected_smeta else 0
            )

        with col2:
            st.subheader("–í–û–†")
            options_vor = list(df_vor.columns)
            key_vor = st.selectbox(
                "–°—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è",
                options_vor,
                index=options_vor.index(detected_vor.get("key" if match_by == "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏" else "name")) 
                if (match_by == "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏" and "key" in detected_vor) or 
                   (match_by != "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏" and "name" in detected_vor) 
                else 0
            )
            vol_vor = st.selectbox(
                "–°—Ç–æ–ª–±–µ—Ü —Å –æ–±—ä—ë–º–æ–º",
                options_vor,
                index=options_vor.index(detected_vor["volume"]) 
                if "volume" in detected_vor else 0
            )

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df_smeta[key_smeta] = df_smeta[key_smeta].astype(str).str.strip()
        df_vor[key_vor] = df_vor[key_vor].astype(str).str.strip()

        if match_by == "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç":
            df_smeta[key_smeta] = df_smeta[key_smeta].str.lower()
            df_vor[key_vor] = df_vor[key_vor].str.lower()

        df_smeta[vol_smeta] = pd.to_numeric(
            df_smeta[vol_smeta].astype(str).str.replace(",", ".").str.replace(r"[^\d.-]", "", regex=True),
            errors='coerce'
        )
        df_vor[vol_vor] = pd.to_numeric(
            df_vor[vol_vor].astype(str).str.replace(",", ".").str.replace(r"[^\d.-]", "", regex=True),
            errors='coerce'
        )

        # === –°–ª–∏—è–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ===
        merged = pd.merge(
            df_smeta, df_vor,
            left_on=key_smeta, right_on=key_vor,
            how="outer", indicator=True,
            suffixes=("_—Å–º–µ—Ç–∞", "_–í–û–†")
        )

        merge_col = "–®–∏—Ñ—Ä" if match_by == "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏" else "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
        merged[merge_col] = merged[key_smeta].fillna(merged[key_vor])

        merged["–û–±—ä—ë–º_—Å–º–µ—Ç–∞"] = merged[vol_smeta + "_—Å–º–µ—Ç–∞"]
        merged["–û–±—ä—ë–º_–í–û–†"] = merged[vol_vor + "_–í–û–†"]

        # –†–∞–∑–Ω–∏—Ü–∞ –≤ %
        valid_max = merged[["–û–±—ä—ë–º_—Å–º–µ—Ç–∞", "–û–±—ä—ë–º_–í–û–†"]].max(axis=1).replace(0, np.nan)
        merged["–†–∞–∑–Ω–∏—Ü–∞_%"] = (
            (merged["–û–±—ä—ë–º_—Å–º–µ—Ç–∞"] - merged["–û–±—ä—ë–º_–í–û–†"]).abs() / valid_max * 100
        ).round(2)

        # –°—Ç–∞—Ç—É—Å
        merged["–°—Ç–∞—Ç—É—Å"] = np.where(
            merged["–†–∞–∑–Ω–∏—Ü–∞_%"] > threshold, "–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ",
            np.where(merged["_merge"] == "both", "–°–æ–≤–ø–∞–¥–∞–µ—Ç",
            np.where(merged["_merge"] == "left_only", "–ù–µ—Ç –≤ –í–û–†", "–ù–µ—Ç –≤ —Å–º–µ—Ç–µ"))
        )

        # === –†–µ–∑—É–ª—å—Ç–∞—Ç ===
        st.header("4. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        result = merged[[merge_col, "–û–±—ä—ë–º_—Å–º–µ—Ç–∞", "–û–±—ä—ë–º_–í–û–†", "–†–∞–∑–Ω–∏—Ü–∞_%", "–°—Ç–∞—Ç—É—Å"]].copy()

        def highlight_status(row):
            if row["–°—Ç–∞—Ç—É—Å"] == "–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ":
                return ["background-color: #ffcccc"] * len(row)
            elif "–ù–µ—Ç" in row["–°—Ç–∞—Ç—É—Å"]:
                return ["background-color: #ffffcc"] * len(row)
            else:
                return ["background-color: #ccffcc"] * len(row)

        st.dataframe(
            result.style.format({
                "–û–±—ä—ë–º_—Å–º–µ—Ç–∞": "{:.3f}", "–û–±—ä—ë–º_–í–û–†": "{:.3f}", "–†–∞–∑–Ω–∏—Ü–∞_%": "{}%"
            }).apply(highlight_status, axis=1),
            use_container_width=True
        )

        # –≠–∫—Å–ø–æ—Ä—Ç
        @st.cache_data
        def convert_df_to_excel(df):
            buffer = BytesIO()
            df.to_excel(buffer, index=False, engine='openpyxl')
            buffer.seek(0)
            return buffer.getvalue()

        output = convert_df_to_excel(merged)
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç (Excel)",
            output,
            "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_—Å–º–µ—Ç—ã_–∏_–í–û–†.xlsx",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
