import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Å–º–µ—Ç", layout="wide")
st.title("üîç –ê–Ω–∞–ª–∏–∑ —Å–º–µ—Ç–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ –∏ –í–û–†")

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ===
st.header("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã")

col1, col2 = st.columns(2)
with col1:
    file_smeta = st.file_uploader("–°–º–µ—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç (Excel)", type=["xlsx"], key="smeta")
with col2:
    file_vor = st.file_uploader("–í–µ–¥–æ–º–æ—Å—Ç—å –æ–±—ä—ë–º–æ–≤ —Ä–∞–±–æ—Ç (–í–û–†)", type=["xlsx"], key="vor")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ===
st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

match_by = st.radio(
    "–°–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –ø–æ:",
    options=["–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç"],
    help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫"
)

threshold = st.slider(
    "–ü–æ—Ä–æ–≥ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –æ–±—ä—ë–º–æ–≤ (%)", 
    min_value=0, max_value=100, value=5,
    help="–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –±–æ–ª—å—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –≤—ã–¥–µ–ª–µ–Ω—ã"
)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
if file_smeta and file_vor:
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
        df_smeta = pd.read_excel(file_smeta)
        df_vor = pd.read_excel(file_vor)

        st.success("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
        with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã"):
            st.dataframe(df_smeta.head())

        with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –í–û–†"):
            st.dataframe(df_vor.head())

        # === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
        df_smeta.columns = [str(col).strip().lower() for col in df_smeta.columns]
        df_vor.columns = [str(col).strip().lower() for col in df_vor.columns]

        # === –í—ã–±–æ—Ä –∫–ª—é—á–∞ –∏ –æ–±—ä—ë–º–æ–≤ ===
        if match_by == "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏":
            key_smeta = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü '–®–∏—Ñ—Ä' –≤ —Å–º–µ—Ç–µ", df_smeta.columns, key="key_smeta")
            key_vor = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü '–®–∏—Ñ—Ä' –≤ –í–û–†", df_vor.columns, key="key_vor")
            smeta_key_col = df_smeta[key_smeta].astype(str).str.strip()
            vor_key_col = df_vor[key_vor].astype(str).str.strip()
        else:
            key_smeta = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' –≤ —Å–º–µ—Ç–µ", df_smeta.columns, key="name_smeta")
            key_vor = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' –≤ –í–û–†", df_vor.columns, key="name_vor")
            smeta_key_col = df_smeta[key_smeta].astype(str).str.lower().str.strip()
            vor_key_col = df_vor[key_vor].astype(str).str.lower().str.strip()

        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ —Å –æ–±—ä—ë–º–∞–º–∏
        vol_smeta = st.selectbox("–°—Ç–æ–ª–±–µ—Ü '–û–±—ä—ë–º' –≤ —Å–º–µ—Ç–µ", df_smeta.columns, key="vol_smeta")
        vol_vor = st.selectbox("–°—Ç–æ–ª–±–µ—Ü '–û–±—ä—ë–º' –≤ –í–û–†", df_vor.columns, key="vol_vor")

        # –ü—Ä–∏–≤–æ–¥–∏–º –æ–±—ä—ë–º—ã –∫ —á–∏—Å–ª—É
        df_smeta[vol_smeta] = pd.to_numeric(df_smeta[vol_smeta], errors='coerce')
        df_vor[vol_vor] = pd.to_numeric(df_vor[vol_vor], errors='coerce')

        # === –°–ª–∏—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
        merged = pd.DataFrame()
        if match_by == "–®–∏—Ñ—Ä —Ä–∞—Å—Ü–µ–Ω–∫–∏":
            merged = pd.merge(
                df_smeta, df_vor,
                left_on=key_smeta, right_on=key_vor,
                suffixes=('_—Å–º–µ—Ç–∞', '_–í–û–†'),
                how='outer', indicator=True
            )
            merge_col = "–®–∏—Ñ—Ä"
            left_key = f"{key_smeta}_—Å–º–µ—Ç–∞"
            right_key = key_vor
        else:
            merged = pd.merge(
                df_smeta, df_vor,
                left_on=key_smeta, right_on=key_vor,
                suffixes=('_—Å–º–µ—Ç–∞', '_–í–û–†'),
                how='outer', indicator=True
            )
            merge_col = "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
            left_key = f"{key_smeta}_—Å–º–µ—Ç–∞"
            right_key = key_vor

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á
        merged[merge_col] = merged[left_key].fillna(merged[right_key])

        # –û–±—ä—ë–º—ã
        merged["–û–±—ä—ë–º_—Å–º–µ—Ç–∞"] = merged[vol_smeta + "_—Å–º–µ—Ç–∞"]
        merged["–û–±—ä—ë–º_–í–û–†"] = merged[vol_vor + "_–í–û–†"]

        # –†–∞—Å—á—ë—Ç —Ä–∞–∑–Ω–∏—Ü—ã
        max_vol = merged[["–û–±—ä—ë–º_—Å–º–µ—Ç–∞", "–û–±—ä—ë–º_–í–û–†"]].max(axis=1).replace(0, np.nan)
        merged["–†–∞–∑–Ω–∏—Ü–∞_–æ–±—ä—ë–º–æ–≤"] = (
            (merged["–û–±—ä—ë–º_—Å–º–µ—Ç–∞"] - merged["–û–±—ä—ë–º_–í–û–†"]).abs() / max_vol * 100
        ).round(2)

        # –°—Ç–∞—Ç—É—Å
        merged["–°—Ç–∞—Ç—É—Å"] = "–°–æ–≤–ø–∞–¥–∞–µ—Ç"
        merged.loc[merged["–†–∞–∑–Ω–∏—Ü–∞_–æ–±—ä—ë–º–æ–≤"] > threshold, "–°—Ç–∞—Ç—É—Å"] = "–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
        merged.loc[merged["–û–±—ä—ë–º_—Å–º–µ—Ç–∞"].isna(), "–°—Ç–∞—Ç—É—Å"] = "–ù–µ—Ç –≤ —Å–º–µ—Ç–µ"
        merged.loc[merged["–û–±—ä—ë–º_–í–û–†"].isna(), "–°—Ç–∞—Ç—É—Å"] = "–ù–µ—Ç –≤ –í–û–†"

        # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
        st.header("3. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

        filter_status = st.multiselect(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            options=merged["–°—Ç–∞—Ç—É—Å"].unique(),
            default=merged["–°—Ç–∞—Ç—É—Å"].unique()
        )

        result = merged[merged["–°—Ç–∞—Ç—É—Å"].isin(filter_status)][
            [merge_col, "–û–±—ä—ë–º_—Å–º–µ—Ç–∞", "–û–±—ä—ë–º_–í–û–†", "–†–∞–∑–Ω–∏—Ü–∞_–æ–±—ä—ë–º–æ–≤", "–°—Ç–∞—Ç—É—Å"]
        ].copy()

        # –¶–≤–µ—Ç–æ–≤–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
        def color_status(val):
            if val == "–†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ":
                return "background-color: #ffcccc"
            elif val == "–ù–µ—Ç –≤ —Å–º–µ—Ç–µ" or val == "–ù–µ—Ç –≤ –í–û–†":
                return "background-color: #ffffcc"
            else:
                return "background-color: #ccffcc"

        st.dataframe(
            result.style.format({
                "–û–±—ä—ë–º_—Å–º–µ—Ç–∞": "{:.3f}",
                "–û–±—ä—ë–º_–í–û–†": "{:.3f}",
                "–†–∞–∑–Ω–∏—Ü–∞_–æ–±—ä—ë–º–æ–≤": "{}%"
            }).applymap(color_status, subset=["–°—Ç–∞—Ç—É—Å"]),
            use_container_width=True
        )

        # === –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞ ===
        @st.cache_data
        def convert_df_to_excel(df):
            buffer = BytesIO()
            df.to_excel(buffer, index=False, engine='openpyxl')
            buffer.seek(0)
            return buffer.getvalue()

        output = convert_df_to_excel(merged)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (Excel)",
            data=output,
            file_name="—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ_—Å–º–µ—Ç—ã_–∏_–í–û–†.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤: {e}")
        st.exception(e)
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞.")